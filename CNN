import os
print(os.listdir(r"C:\Haritha\MCA project\Edge based training"))


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import style
import seaborn as sns

get_ipython().run_line_magic('matplotlib', 'inline')
style.use('fivethirtyeight')
sns.set(style='whitegrid',color_codes=True)

from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from sklearn.metrics import accuracy_score,precision_score,recall_score,confusion_matrix,roc_curve,roc_auc_score
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import LabelEncoder
#preprocess.
from tensorflow.keras.preprocessing.image import ImageDataGenerator



from tensorflow.keras import backend as K
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam,SGD,Adagrad,Adadelta,RMSprop
from tensorflow.keras.utils import to_categorical



from tensorflow.keras.layers import Dropout, Flatten,Activation
from tensorflow.keras.layers import Conv2D, MaxPooling2D, BatchNormalization

import tensorflow as tf
import random as rn


import cv2
import numpy as np
from tqdm import tqdm
import os
from random import shuffle
from zipfile import ZipFile
from PIL import Image

X=[]
Z=[]
IMG_SIZE=150

Beautiful_Dir= r"C:\Haritha\MCA project\Edge based training\Beautiful"
Happy_Dir=r"C:\Haritha\MCA project\Edge based training\Happy"
Loud_Dir=r"C:\Haritha\MCA project\Edge based training\Loud"
Quiet_Dir=r"C:\Haritha\MCA project\Edge based training\Quiet"
Sad_Dir=r"C:\Haritha\MCA project\Edge based training\Sad"
Ugly_Dir=r"C:\Haritha\MCA project\Edge based training\Ugly"

def assign_label(img,Digit_type):
    return Digit_type

def make_train_data(Digit_type,DIR):
    for img in tqdm(os.listdir(DIR)):
        label=assign_label(img,Digit_type)
        path = os.path.join(DIR,img)
        img = cv2.imread(path,cv2.IMREAD_COLOR)
        img = cv2.resize(img, (IMG_SIZE,IMG_SIZE))

        X.append(np.array(img))
        Z.append(str(label))
        

make_train_data('Ugly',Sad_Dir)
print(len(X))

make_train_data('SAD',Sad_Dir)
print(len(X))


make_train_data('Happy',Happy_Dir)
print(len(X))


make_train_data('BEAUTIFUL',Beautiful_Dir)
print(len(X))

make_train_data('QUIET',Quiet_Dir)
print(len(X))

make_train_data('LOUD',Loud_Dir)
print(len(X))

fig,ax=plt.subplots(5,2)
fig.set_size_inches(15,15)
for i in range(5):
    for j in range (2):
        l=rn.randint(0,len(Z))
        ax[i,j].imshow(X[l])
        ax[i,j].set_title('Word: '+Z[l])

plt.tight_layout()


le=LabelEncoder()
Y=le.fit_transform(Z)
Y=to_categorical(Y,10)
X=np.array(X)
X=X/255

x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.20,random_state=42)


np.random.seed(42)
rn.seed(42)

model = Sequential()
model.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same',activation ='relu', input_shape = (150,150,3)))
model.add(MaxPooling2D(pool_size=(2,2)))


model.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same',activation ='relu'))
model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))


model.add(Conv2D(filters =96, kernel_size = (3,3),padding = 'Same',activation ='relu'))
model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))

model.add(Conv2D(filters = 96, kernel_size = (3,3),padding = 'Same',activation ='relu'))
model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dense(10, activation = "softmax"))


batch_size=64
epochs=60

from tensorflow.keras.callbacks import ReduceLROnPlateau
red_lr= ReduceLROnPlateau(monitor='val_acc',patience=3,verbose=1,factor=0.1)

datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)
        zoom_range = 0.1, # Randomly zoom image
        width_shift_range=0.2,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.2,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=True,  # randomly flip images
        vertical_flip=False)  # randomly flip images


datagen.fit(x_train)

model.compile(optimizer=Adam(learning_rate=0.001),loss='categorical_crossentropy',metrics=['accuracy'])


model.summary()

History = model.fit_generator(datagen.flow(x_train,y_train, batch_size=batch_size),
                              epochs = epochs, validation_data = (x_test,y_test),
                              verbose = 1, steps_per_epoch=x_train.shape[0] // batch_size)


plt.plot(History.history['accuracy'])
plt.plot(History.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epochs')
plt.legend(['train', 'test'])
plt.show()


from sklearn.metrics import accuracy_score
pred = model.predict(x_test)
predict_classes = np.argmax(pred,axis=1)
expected_classes = np.argmax(y_test,axis=1)
print(expected_classes.shape)
print(predict_classes.shape)
correct = accuracy_score(expected_classes,predict_classes)
print(f"Accuracy: {correct}")

from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
import seaborn as ss
#matrix=confusion_matrix(y_test,pred)
confusionMatrix_CNN = confusion_matrix(expected_classes,predict_classes)
matrix1 = classification_report(expected_classes,predict_classes)
print('Classification report : \n',matrix1)

xAxisLabels = ['BEAUTIFUL',  'LOUD', 'QUIET', 'SAD','UGLY','Happy' ]
yAxisLabels = ['BEAUTIFUL',  'LOUD', 'QUIET', 'SAD','UGLY','Happy']

ss.heatmap(confusionMatrix_CNN,annot=True, cmap='OrRd',xticklabels=xAxisLabels, yticklabels=yAxisLabels,fmt='g')

